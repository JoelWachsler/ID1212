{"version":3,"sources":["../../src/controller/network_controller.js"],"names":["NetworkController","constructor","controller","io","pushInitialData","socket","snakes","food","gameArea","gameController","game","pushGameOver","id","reason","pushGameArea","pushFood","pushSnakes"],"mappings":";AACA;;;;;;AAMA;AACA;AACA;AACA,8D,8FAVA;;AAYA;;;AAGe,MAAMA,iBAAN,CAAwB;AACrC;;;;;AAKAC,cAAYC,UAAZ,EAAwBC,EAAxB,EAA4B;AAC1B,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,EAAL,GAAUA,EAAV;AACD;;AAED;;;;;;AAMAC,kBAAgBC,MAAhB,EAAwB;AACtB;AACA,UAAM,EAAEC,MAAF,EAAUC,IAAV,EAAgBC,QAAhB,KAA6B,KAAKN,UAAL,CAAgBO,cAAhB,CAA+BC,IAAlE;;AAEA,4CAAWL,MAAX,EAAmBC,MAAnB;AACA,0CAASD,MAAT,EAAiBE,IAAjB;AACA,8CAAaF,MAAb,EAAqBG,QAArB;AACD;;AAED;;;;;;;AAOAG,eAAaC,EAAb,EAAiBC,MAAjB,EAAyB;AACvB,8CAAa,KAAKV,EAAlB,EAAsBS,EAAtB,EAA0BC,MAA1B;AACD;;AAED;;;;;;AAMAC,eAAaN,QAAb,EAAuB;AACrB,8CAAa,KAAKL,EAAlB,EAAsBK,QAAtB;AACD;;AAED;;;;;;AAMAO,WAASR,IAAT,EAAe;AACb,0CAAS,KAAKJ,EAAd,EAAkBI,IAAlB;AACD;;AAED;;;;;;AAMAS,aAAWV,MAAX,EAAmB;AACjB,4CAAW,KAAKH,EAAhB,EAAoBG,MAApB;AACD,GAjEoC,C","file":"network_controller.js","sourcesContent":["// @ts-check\nimport {\n  pushSnakes,\n  pushFood,\n  pushGameArea,\n  pushGameOver,\n} from \"../net/game_broadcast_handler\";\nimport Controller from \"./controller\";\nimport Point from \"../game/point\";\nimport Food from \"../game/food\";\nimport Snake from \"../game/snake\";\n\n/**\n * All communication to the net package must go through this controller.\n */\nexport default class NetworkController {\n  /**\n   * @param {Controller} controller \n   * @param {*} io \n   * @api public\n   */\n  constructor(controller, io) {\n    this.controller = controller;\n    this.io = io;\n  }\n\n  /**\n   * Pushes initial game data to a newly connected client.\n   * \n   * @param {*} socket \n   * @api public\n   */\n  pushInitialData(socket) {\n    // Data to push\n    const { snakes, food, gameArea } = this.controller.gameController.game;\n\n    pushSnakes(socket, snakes);\n    pushFood(socket, food);\n    pushGameArea(socket, gameArea);\n  }\n\n  /**\n   * Update if a player dies.\n   * \n   * @param {string} id The id the player who lost.\n   * @param {string} reason The reason why they lost.\n   * @api public\n   */\n  pushGameOver(id, reason) {\n    pushGameOver(this.io, id, reason);\n  }\n\n  /**\n   * Updates the game area.\n   * \n   * @param {Point[]} gameArea \n   * @api public\n   */\n  pushGameArea(gameArea) {\n    pushGameArea(this.io, gameArea);\n  }\n\n  /**\n   * Updates the food.\n   * \n   * @param {Food[]} food \n   * @api public\n   */\n  pushFood(food) {\n    pushFood(this.io, food);\n  }\n\n  /**\n   * Update the snakes.\n   * \n   * @param {Snake[]} snakes \n   * @api public\n   */\n  pushSnakes(snakes) {\n    pushSnakes(this.io, snakes);\n  }\n}\n"]}