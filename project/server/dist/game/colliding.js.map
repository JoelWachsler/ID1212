{"version":3,"sources":["../../src/game/colliding.js"],"names":["Colliding","colliding","point1","point2","x","y","collidingMany","points","findIndex","point"],"mappings":";AACA,wD,8FADA;;AAGA;;;AAGe,MAAMA,SAAN,CAAgB;AAC7B;;;;;;;;AAQAC,YAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AACxB,WAAOD,OAAOE,CAAP,KAAaD,OAAOC,CAApB;AACAF,WAAOG,CAAP,KAAaF,OAAOE,CAD3B;AAED;;AAED;;;;;;;;AAQAC,gBAAcJ,MAAd,EAAsBK,MAAtB,EAA8B;AAC5B,WAAOA,OAAOC,SAAP,CAAiBC,SAAS,KAAKR,SAAL,CAAeC,MAAf,EAAuBO,KAAvB,CAA1B,MAA6D,CAAC,CAArE;AACD,GAxB4B,C","file":"colliding.js","sourcesContent":["// @ts-check\nimport Point from \"./point\";\n\n/**\n * Abstract class which defines common logic for the different game items.\n */\nexport default class Colliding {\n  /**\n   * Checks if the two points are colliding.\n   * \n   * @param {Point} point1\n   * @param {Point} point2\n   * @return {boolean} true if point1 is colliding with point2 else false.\n   * @api protected\n   */\n  colliding(point1, point2) {\n    return point1.x === point2.x\n        && point1.y === point2.y;\n  }\n\n  /**\n   * Check if point1 is colliding with a point in point.\n   * \n   * @param {Point} point1 \n   * @param {Point[]} points \n   * @return {boolean} true if point1 is colliding with another point in points else false.\n   * @api protected\n   */\n  collidingMany(point1, points) {\n    return points.findIndex(point => this.colliding(point1, point)) !== -1;\n  }\n}"]}