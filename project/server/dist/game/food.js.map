{"version":3,"sources":["../../src/game/food.js"],"names":["Food","constructor","point","special","isColliding","colliding","isCollidingWithPoints","points","collidingMany"],"mappings":";AACA;AACA,8D,8FAFA;;AAIA;;;AAGe,MAAMA,IAAN,4BAA6B;AAC1C;;;;AAIAC,cAAYC,KAAZ,EAAoB;AAClB;;AAEA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKD,KAAL,GAAaA,KAAb;AACD;;AAED;;;;;;;AAOAE,cAAYF,KAAZ,EAAmB;AACjB,WAAO,MAAMG,SAAN,CAAgB,KAAKH,KAArB,EAA4BA,KAA5B,CAAP;AACD;;AAED;;;;;;AAMAI,wBAAsBC,MAAtB,EAA8B;AAC5B,WAAO,MAAMC,aAAN,CAAoB,KAAKN,KAAzB,EAAgCK,MAAhC,CAAP;AACD,GA/ByC,C","file":"food.js","sourcesContent":["// @ts-check\nimport Colliding from \"./colliding\";\nimport Point from \"../game/point\";\n\n/**\n * Representation of a piece of food on the game board.\n */\nexport default class Food extends Colliding {\n  /**\n   * @param {Point} point \n   * @api public\n   */\n  constructor(point,) {\n    super();\n\n    this.special = false;\n    this.point = point;\n  }\n\n  /**\n   * Checks if this piece of food is colliding with the provided one.\n   * \n   * @param {Point} point \n   * @return {boolean} true if the food is colliding with the provided point else false.\n   * @api public\n   */\n  isColliding(point) {\n    return super.colliding(this.point, point);\n  }\n\n  /**\n   * Check if this object is colliding with other points.\n   * \n   * @param {Point[]} points The points to check this point with.\n   * @api public\n   */\n  isCollidingWithPoints(points) {\n    return super.collidingMany(this.point, points);\n  }\n}\n"]}