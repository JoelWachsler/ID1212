{"version":3,"sources":["../../src/game/game.js"],"names":["Game","controller","snakes","food","gameArea","i","push","x","Math","floor","random","y","fps","setInterval","updateSnakes","bind","networkController","pushGameArea","pushFood","foodLen","length","filter","snake","applyMovement","colliding","isColliding","point","addBodyPart","isCollidingWithSelf","console","log","pushGameOver","updateFood","pushSnakes","id","newDirection","find","changeMovement","index","findIndex","splice"],"mappings":"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","file":"game.js","sourcesContent":["import Snake from \"./snake\";\nimport Point from \"./point\";\nimport Food from \"./food\";\n\n/**\n * Keeps track of a game room instance.\n */\nexport default class Game {\n  constructor(controller) {\n    this.controller = controller;\n    this.snakes = [];\n    this.food = [];\n    this.gameArea = [];\n\n    // Let's create the game area\n    for (let i = -1000; i <= 1000; i += 25) {\n      // Top\n      this.gameArea.push(new Point(i, -1000));\n      // Right\n      this.gameArea.push(new Point(1000, i));\n      // Bottom\n      this.gameArea.push(new Point(i, 1000));\n      // Left\n      this.gameArea.push(new Point(-1000, i));\n    }\n\n    // Spawn some random food\n    for (let i = 0; i < 200; i++) {\n      const x = Math.floor(Math.random() * 80 - 50) * 25;\n      const y = Math.floor(Math.random() * 80 - 50) * 25;\n      this.food.push(new Food(new Point(x, y)));\n    }\n\n    // Rate of which to update the game\n    this.fps = 1;\n\n    // Server fps\n    setInterval(this.updateSnakes.bind(this), 1000 / this.fps);\n  }\n\n  updateGameArea() {\n    this.controller.networkController.pushGameArea(this.gameArea);\n  }\n\n  updateFood() {\n    this.controller.networkController.pushFood(this.food);\n  }\n\n  /**\n   * Updates the game state for all players and pushes them.\n   */\n  updateSnakes() {\n    const foodLen = this.food.length;\n\n    // Move all players\n    this.snakes.filter(snake => {\n      snake.applyMovement();\n\n      // Check if this player is colliding with a piece of food.\n      this.food = this.food.filter(food => {\n        const colliding = snake.isColliding(food.point);\n\n        if (colliding) snake.addBodyPart();\n\n        return !colliding;\n      });\n\n      // Check if the current snake is colliding with itself\n      if (snake.isCollidingWithSelf()) {\n        console.log('Colliding!')\n        this.controller.networkController.pushGameOver()\n\n        return false;\n      }\n\n      return true;\n    });\n\n    if (this.food.length != foodLen) this.updateFood();\n\n    // Broadcast them\n    this.controller.networkController.pushSnakes(this.snakes);\n  }\n\n  updateMovement(id, newDirection) {\n    const snake = this.snakes.find(snake => snake.id === id);\n    snake.changeMovement(newDirection);\n  }\n\n  /**\n   * Adds a player to the current game instance.\n   *\n   * @param {*} socket\n   */\n  addPlayer(id) {\n    this.snakes.push(new Snake(id));\n  }\n\n  /**\n   * Removes the player with the provided id from the list of players in this game.\n   *\n   * @param {*} id\n   */\n  removePlayer(id) {\n    const index = this.snakes.findIndex(snake => snake.id === id);\n\n    this.snakes.splice(index, 1);\n  }\n}\n"]}