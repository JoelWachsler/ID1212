{"version":3,"sources":["../../src/game/game.js"],"names":["Game","constructor","controller","snakes","food","gameArea","gameAreaWidth","gameAreaHeight","createGameArea","fps","setInterval","updateSnakes","bind","length","spawnFood","i","push","randomPoint","minX","maxX","minY","maxY","x","Math","floor","random","y","newFood","isCollidingFood","findIndex","isColliding","point","isCollidingSnake","j","snake","head","k","body","updateFood","updateGameArea","networkController","pushGameArea","pushFood","foodLen","forEach","applyMovement","filter","colliding","addBodyPart","isEatingThemselves","isCollidingWithSelf","pushGameOver","id","anotherSnake","bodyPartsEaten","splice","bodyPart","pushSnakes","updateMovement","newDirection","find","changeMovement","addPlayer","okSpawn","spawnPoint","removePlayer","index"],"mappings":"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","file":"game.js","sourcesContent":["// @ts-check\nimport Snake from \"./snake\";\nimport Point from \"./point\";\nimport Food from \"./food\";\nimport { SIZE } from \"../common/constants\";\nimport Controller from \"../controller/controller\";\n\n/**\n * Keeps track of a game room instance.\n */\nexport default class Game {\n  /**\n   * @param {Controller} controller \n   * @api public\n   */\n  constructor(controller) {\n    this.controller = controller;\n    this.snakes = [];\n    this.food = [];\n    this.gameArea = [];\n\n    // Define the game area.\n    this.gameAreaWidth = 1000;\n    this.gameAreaHeight = 1000;\n\n    this.createGameArea();\n\n    // Rate of which to update the game\n    this.fps = 5;\n\n    // Server fps\n    setInterval(this.updateSnakes.bind(this), 1000 / this.fps);\n\n    // Let's spawn some random food if there's less than 100 on the board.\n    // Check every 5 seconds.\n    setInterval(() => {\n      if (this.food.length < 100) this.spawnFood();\n    }, 5000);\n\n    // Initial spawn\n    this.spawnFood();\n  }\n\n  /**\n   * Creates points for the game area.\n   * \n   * @api private\n   */\n  createGameArea() {\n    // Let's create the game area\n    for (let i = -this.gameAreaWidth; i <= this.gameAreaHeight; i += 25) {\n      // Top\n      this.gameArea.push(new Point(i, -this.gameAreaHeight));\n      // Right\n      this.gameArea.push(new Point(this.gameAreaWidth, i));\n      // Bottom\n      this.gameArea.push(new Point(i, this.gameAreaHeight));\n      // Left\n      this.gameArea.push(new Point(-this.gameAreaWidth, i));\n    }\n  }\n\n  /**\n   * Generates a random point depending on the input.\n   * \n   * @param {number} minX \n   * @param {number} maxX \n   * @param {number} minY \n   * @param {number} maxY \n   * @return {Point} point\n   * @api private\n   */\n  randomPoint(minX=-this.gameAreaWidth+25,\n              maxX=this.gameAreaWidth-25,\n              minY=-this.gameAreaHeight+25,\n              maxY=this.gameAreaHeight-25) {\n\n    let x = Math.floor(Math.random() * (maxX - minX) + minX);\n    let y = Math.floor(Math.random() * (maxY - minY) + minY);\n\n    // Only multiples of 25.\n    x -= x % SIZE;\n    y -= y % SIZE;\n\n    return new Point(x, y);\n  }\n\n  /**\n   * @api private\n   */\n  spawnFood() {\n    // Spawn some random food\n    // 200 attempts\n    for (let i = 0; i < 200; i++) {\n      const newFood = new Food(this.randomPoint());\n\n\n      // Do not spawn food on another piece of food.\n      const isCollidingFood = this.food.findIndex(food => food.isColliding(newFood.point));\n      if (isCollidingFood !== -1) continue;\n\n      // Do not spawn food on a snake.\n      let isCollidingSnake = false;\n      for (let j = 0; j < this.snakes.length && !isCollidingSnake; j++) {\n        const snake = this.snakes[j];\n        if (newFood.isColliding(snake.head)) {\n          isCollidingSnake = true;\n          break;\n        }\n\n        for (let k = 0; k < snake.body.length; k++) {\n          const body = snake.body[k];\n          if (newFood.isColliding(body)) {\n            isCollidingSnake = true;\n            break;\n          }\n        }\n      }\n\n      if (isCollidingSnake) continue;\n\n      this.food.push(newFood);\n    }\n\n    // Push the changes to all clients.\n    this.updateFood();\n  }\n\n  /**\n   * @api private\n   */\n  updateGameArea() {\n    this.controller.networkController.pushGameArea(this.gameArea);\n  }\n\n  /**\n   * @api private\n   */\n  updateFood() {\n    this.controller.networkController.pushFood(this.food);\n  }\n\n  /**\n   * Updates the game state for all players and pushes them.\n   * \n   * @api private\n   */\n  updateSnakes() {\n    const foodLen = this.food.length;\n\n    // Move all players\n    this.snakes.forEach(snake => {\n      snake.applyMovement();\n\n      // Check if this player is colliding with a piece of food.\n      this.food = this.food.filter(food => {\n        const colliding = snake.isColliding(food.point);\n\n        if (colliding) snake.addBodyPart();\n\n        return !colliding;\n      });\n    })\n\n    // Check if a snake is colliding with itself or a wall.\n    this.snakes = this.snakes.filter(snake => {\n      const isEatingThemselves = snake.isCollidingWithSelf();\n      if (isEatingThemselves) {\n        this.controller.networkController.pushGameOver(snake.id, \"ate yourself!\");\n        return false;\n      }\n\n      for (let i = 0; i < this.gameArea.length; i++) {\n        if (snake.isColliding(this.gameArea[i])) {\n          this.controller.networkController.pushGameOver(snake.id, \"crashed into a wall!\");\n\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    // Check if a snake is eating another snake\n    for (let i = 0; i < this.snakes.length; i++) {\n      const snake = this.snakes[i];\n\n      for (let j = 0; j < this.snakes.length; j++) {\n        if (i == j) continue;\n\n        const anotherSnake = this.snakes[j];\n        for (let k = 1; k < anotherSnake.body.length; k++) {\n          if (snake.isColliding(anotherSnake.body[k])) {\n            const bodyPartsEaten = anotherSnake.body.splice(k);\n\n            // Add the pieces to the other snake\n            bodyPartsEaten.forEach(bodyPart => snake.addBodyPart());\n          }\n        }\n      }\n    }\n\n    // Only update the food if something happened to them\n    if (this.food.length != foodLen) this.updateFood();\n\n    // Broadcast them\n    this.controller.networkController.pushSnakes(this.snakes);\n  }\n\n  /**\n   * @param {string} id \n   * @param {number} newDirection \n   * @api private\n   */\n  updateMovement(id, newDirection) {\n    const snake = this.snakes.find(snake => snake.id === id);\n    snake.changeMovement(newDirection);\n  }\n\n  /**\n   * Adds a player to the current game instance.\n   *\n   * @param {string} id\n   * @api public\n   */\n  addPlayer(id) {\n    // Spawn a new snake on a free position.\n    let okSpawn = false;\n    while (!okSpawn) {\n      const spawnPoint = this.randomPoint(\n        -this.gameAreaWidth+25,\n        this.gameAreaWidth-500,\n        -this.gameAreaHeight+25,\n        this.gameAreaHeight-25);\n      okSpawn = true;\n\n      for (let i = 0; i < this.snakes.length; i++) {\n        if (this.snakes[i].isColliding(spawnPoint)) {\n          okSpawn = false;\n          break;\n        }\n      }\n\n      if (okSpawn)\n        this.snakes.push(new Snake(id, spawnPoint));\n    }\n  }\n\n  /**\n   * Removes the player with the provided id from the list of players in this game.\n   *\n   * @param {string} id\n   * @api public\n   */\n  removePlayer(id) {\n    const index = this.snakes.findIndex(snake => snake.id === id);\n\n    if (index === -1) return;\n\n    this.snakes.splice(index, 1);\n  }\n}\n"]}