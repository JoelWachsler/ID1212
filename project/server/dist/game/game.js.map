{"version":3,"sources":["../../src/game/game.js"],"names":["Game","constructor","controller","snakes","food","gameArea","gameAreaWidth","gameAreaHeight","createGameArea","fps","setInterval","updateSnakes","bind","length","spawnFood","i","Math","floor","random","special","updateFood","push","randomPoint","minX","maxX","minY","maxY","x","y","maxFoodToSpawn","newFood","isCollidingWithPoints","map","point","snakePoints","snake","body","snakePointsArray","concat","apply","updateGameArea","networkController","pushGameArea","pushFood","foodLen","forEach","applyMovement","isCollidingWithFood","filter","colliding","slice","pushGameOver","id","match","j","cmpSnake","splice","pushSnakes","updateMovement","newDirection","find","changeMovement","addPlayer","okSpawn","spawnPoint","isColliding","removePlayer","index","findIndex"],"mappings":"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","file":"game.js","sourcesContent":["// @ts-check\nimport Snake from \"./snake\";\nimport Point from \"./point\";\nimport Food from \"./food\";\nimport { SIZE } from \"../common/constants\";\nimport Controller from \"../controller/controller\";\n\n/**\n * Keeps track of a game room instance.\n */\nexport default class Game {\n  /**\n   * @param {Controller} controller \n   * @api public\n   */\n  constructor(controller) {\n    this.controller = controller;\n    this.snakes = [];\n    this.food = [];\n    this.gameArea = [];\n\n    // Define the game area.\n    this.gameAreaWidth = 500;\n    this.gameAreaHeight = 500;\n\n    this.createGameArea();\n\n    // Rate of which to update the game\n    this.fps = 20;\n\n    // Server fps\n    setInterval(this.updateSnakes.bind(this), 1000 / this.fps);\n\n    // Let's spawn some random food if there's less than 100 on the board.\n    // Check every 5 seconds.\n    setInterval(() => {\n      if (this.food.length < 1000) this.spawnFood(100);\n    }, 1000);\n\n    // Make a piece of food special\n    setInterval(() => {\n      for (let i = 0; i < 3; i++)\n        this.food[Math.floor(Math.random() * this.food.length) + 0].special = true;\n      \n      this.updateFood();\n    }, 10000);\n\n    // Initial spawn\n    this.spawnFood();\n  }\n\n  /**\n   * Creates points for the game area.\n   * \n   * @api private\n   */\n  createGameArea() {\n    // Let's create the game area\n    for (let i = -this.gameAreaWidth; i <= this.gameAreaHeight; i += 25) {\n      // Top\n      this.gameArea.push(new Point(i, -this.gameAreaHeight));\n      // Right\n      this.gameArea.push(new Point(this.gameAreaWidth, i));\n      // Bottom\n      this.gameArea.push(new Point(i, this.gameAreaHeight));\n      // Left\n      this.gameArea.push(new Point(-this.gameAreaWidth, i));\n    }\n  }\n\n  /**\n   * Generates a random point depending on the input.\n   * \n   * @param {number} minX \n   * @param {number} maxX \n   * @param {number} minY \n   * @param {number} maxY \n   * @return {Point} point\n   * @api private\n   */\n  randomPoint(minX=-this.gameAreaWidth+25,\n              maxX=this.gameAreaWidth-25,\n              minY=-this.gameAreaHeight+25,\n              maxY=this.gameAreaHeight-25) {\n\n    let x = Math.floor(Math.random() * (maxX - minX) + minX);\n    let y = Math.floor(Math.random() * (maxY - minY) + minY);\n\n    // Only multiples of 25.\n    x -= x % SIZE;\n    y -= y % SIZE;\n\n    return new Point(x, y);\n  }\n\n  /**\n   * @api private\n   */\n  spawnFood(maxFoodToSpawn) {\n    // Spawn some random food\n    // 200 attempts\n    for (let i = 0; i < maxFoodToSpawn; i++) {\n      const newFood = new Food(this.randomPoint());\n\n      // Do not spawn food on another piece of food.\n      if (newFood.isCollidingWithPoints(this.food.map(food => food.point))) continue;\n\n      // Do not spawn food on a snake.\n      const snakePoints = this.snakes.map(snake => snake.body);\n      const snakePointsArray = [].concat.apply([], snakePoints);\n      if (newFood.isCollidingWithPoints(snakePointsArray)) continue;\n\n      this.food.push(newFood);\n    }\n\n    // Push the changes to all clients.\n    this.updateFood();\n  }\n\n  /**\n   * @api private\n   */\n  updateGameArea() {\n    this.controller.networkController.pushGameArea(this.gameArea);\n  }\n\n  /**\n   * @api private\n   */\n  updateFood() {\n    this.controller.networkController.pushFood(this.food);\n  }\n\n  /**\n   * Updates the game state for all players.\n   * \n   * @api private\n   */\n  updateSnakes() {\n    const foodLen = this.food.length;\n\n    // Move all players\n    this.snakes.forEach(snake => snake.applyMovement());\n\n    // Check if this player is colliding with a piece of food.\n    this.snakes.forEach(snake => snake.isCollidingWithFood(this.food));\n\n    // Check if a snake is eating itself.\n    this.snakes = this.snakes.filter(snake => {\n      const colliding = snake.isCollidingWithPoints(snake.body.slice(1));\n      \n      if (colliding) this.controller.networkController.pushGameOver(snake.id, \"ate yourself!\");\n\n      return !colliding;\n    });\n\n    // Check if a snake is colliding a wall.\n    this.snakes = this.snakes.filter(snake => {\n      const colliding = snake.isCollidingWithPoints(this.gameArea);\n      \n      if (colliding) this.controller.networkController.pushGameOver(snake.id, \"crashed into a wall!\");\n\n      return !colliding;\n    });\n\n    // Check if a snake is crashing into another snake.\n    // Going from the back so we don't mess anything up if a snake is removed.\n    for (let i = this.snakes.length - 1; i >= 0; i--) {\n      const snake = this.snakes[i];\n      let match = false;\n      for (let j = 0; j < this.snakes.length && !match; j++) {\n        if (i === j) continue;\n\n        const cmpSnake = this.snakes[j].body;\n\n        if (snake.isCollidingWithPoints(cmpSnake)) {\n          match = true;\n          this.controller.networkController.pushGameOver(snake.id, \"crashed into another snake!\");\n        }\n      }\n\n      // Removing the snake who collided.\n      if (match) this.snakes.splice(i, 1);\n    }\n\n    // Only update the food if something happened to them\n    if (this.food.length != foodLen) this.updateFood();\n\n    // Broadcast them\n    this.controller.networkController.pushSnakes(this.snakes);\n  }\n\n  /**\n   * @param {string} id \n   * @param {number} newDirection \n   * @api private\n   */\n  updateMovement(id, newDirection) {\n    const snake = this.snakes.find(snake => snake.id === id);\n\n    if (snake !== void 0) snake.changeMovement(newDirection);\n  }\n\n  /**\n   * Adds a player to the current game instance.\n   *\n   * @param {string} id\n   * @api public\n   */\n  addPlayer(id) {\n    // Check if the player is already playing.\n    if (this.snakes.find(snake => snake.id === id) !== void 0) return;\n\n    // Spawn a new snake on a free point.\n    let okSpawn = false;\n    while (!okSpawn) {\n      const spawnPoint = this.randomPoint(\n        -this.gameAreaWidth+25,\n        this.gameAreaWidth-500,\n        -this.gameAreaHeight+25,\n        this.gameAreaHeight-25);\n      okSpawn = true;\n\n      for (let i = 0; i < this.snakes.length; i++) {\n        if (this.snakes[i].isColliding(spawnPoint)) {\n          okSpawn = false;\n          break;\n        }\n      }\n\n      if (okSpawn) this.snakes.push(new Snake(id, spawnPoint));\n    }\n  }\n\n  /**\n   * Removes the player with the provided id from the list of players in this game.\n   *\n   * @param {string} id\n   * @api public\n   */\n  removePlayer(id) {\n    const index = this.snakes.findIndex(snake => snake.id === id);\n\n    if (index === -1) return;\n\n    this.snakes.splice(index, 1);\n  }\n}\n"]}