{"version":3,"sources":["../../src/game/snake.js"],"names":["SIZE","UP","RIGHT","DOWN","LEFT","Snake","id","head","body","direction","i","length","x","y","newDirection","current","point","push"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;AACA,IAAMA,OAAO,EAAb;;AAEA;AACA,IAAMC,KAAK,CAAX;AACA,IAAMC,QAAQ,CAAd;AACA,IAAMC,OAAO,CAAb;AACA,IAAMC,OAAO,CAAb;;AAEA;;;;IAGqBC,K;AACnB,iBAAYC,EAAZ,EAAgB;AAAA;;AACd,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKC,IAAL,GAAY,oBAAU,CAAV,EAAa,CAAb,CAAZ;AACA,SAAKC,IAAL,GAAY,CAAC,KAAKD,IAAN,CAAZ;AACA,SAAKE,SAAL,GAAiBP,KAAjB;AACD;;AAED;;;;;;;oCAGgB;AACd;AACA,WAAK,IAAIQ,IAAI,KAAKF,IAAL,CAAUG,MAAV,GAAmB,CAAhC,EAAmCD,IAAI,CAAvC,EAA0CA,GAA1C,EAA+C;AAAA,oBAC5B,KAAKF,IAAL,CAAUE,IAAI,CAAd,CAD4B;AAAA,YACrCE,CADqC,SACrCA,CADqC;AAAA,YAClCC,CADkC,SAClCA,CADkC;;AAE7C,aAAKL,IAAL,CAAUE,CAAV,IAAe,oBAAUE,CAAV,EAAaC,CAAb,CAAf;AACD;;AAED,cAAQ,KAAKJ,SAAb;AACE,aAAKR,EAAL;AACE,eAAKM,IAAL,CAAUM,CAAV,IAAeb,IAAf;AACA;AACF,aAAKE,KAAL;AACE,eAAKK,IAAL,CAAUK,CAAV,IAAeZ,IAAf;AACA;AACF,aAAKG,IAAL;AACE,eAAKI,IAAL,CAAUM,CAAV,IAAeb,IAAf;AACA;AACF,aAAKI,IAAL;AACE,eAAKG,IAAL,CAAUK,CAAV,IAAeZ,IAAf;AACA;AAZJ;AAcD;;AAED;;;;;;;;;mCAMec,Y,EAAc;AAC3B,UAAMC,UAAU,KAAKN,SAArB;;AAEA,cAAQK,YAAR;AACE,aAAKb,EAAL;AACE,cAAIc,WAAWZ,IAAf,EAAqB,KAAKM,SAAL,GAAiBR,EAAjB;AACrB;AACF,aAAKC,KAAL;AACE,cAAIa,WAAWX,IAAf,EAAqB,KAAKK,SAAL,GAAiBP,KAAjB;AACrB;AACF,aAAKC,IAAL;AACE,cAAIY,WAAWd,EAAf,EAAmB,KAAKQ,SAAL,GAAiBN,IAAjB;AACnB;AACF,aAAKC,IAAL;AACE,cAAIW,WAAWb,KAAf,EAAsB,KAAKO,SAAL,GAAiBL,IAAjB;AACtB;AAZJ;AAcD;;AAED;;;;;;;;gCAKYY,K,EAAO;AAAA,kBACA,KAAKT,IADL;AAAA,UACTK,CADS,SACTA,CADS;AAAA,UACNC,CADM,SACNA,CADM;;;AAGjB,aAAOD,MAAMI,MAAMJ,CAAZ,IAAiBC,MAAMG,MAAMH,CAApC;AACD;;;0CAEqB;AAAA,mBACH,KAAKN,IADF;AAAA,UACZK,CADY,UACZA,CADY;AAAA,UACTC,CADS,UACTA,CADS;;;AAGpB,WAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAI,KAAKF,IAAL,CAAUG,MAA9B,EAAsCD,GAAtC,EAA2C;AACzC,YAAI,KAAKF,IAAL,CAAUE,CAAV,EAAaE,CAAb,KAAmBA,CAAnB,IAAwB,KAAKJ,IAAL,CAAUE,CAAV,EAAaG,CAAb,KAAmBA,CAA/C,EACE,OAAO,IAAP;AACH;;AAED,aAAO,KAAP;AACD;;;kCAEa;AACZ,WAAKL,IAAL,CAAUS,IAAV,CAAe,oBAAU,KAAKV,IAAL,CAAUK,CAApB,EAAuB,KAAKL,IAAL,CAAUM,CAAjC,CAAf;AACD;;;;;;kBAnFkBR,K","file":"snake.js","sourcesContent":["import Point from \"./point\";\n\n// Snake block size\nconst SIZE = 25;\n\n// Different directions\nconst UP = 0;\nconst RIGHT = 1;\nconst DOWN = 2;\nconst LEFT = 3;\n\n/**\n * An instance of a snake.\n */\nexport default class Snake {\n  constructor(id) {\n    this.id = id;\n    this.head = new Point(0, 0);\n    this.body = [this.head];\n    this.direction = RIGHT;\n  }\n\n  /**\n   * Moves the snake head and body to the current direction.\n   */\n  applyMovement() {\n    // Move the body parts\n    for (let i = this.body.length - 1; i > 0; i--) {\n      const { x, y } = this.body[i - 1];\n      this.body[i] = new Point(x, y);\n    }\n\n    switch (this.direction) {\n      case UP:\n        this.head.y -= SIZE;\n        break;\n      case RIGHT:\n        this.head.x += SIZE;\n        break;\n      case DOWN:\n        this.head.y += SIZE;\n        break;\n      case LEFT:\n        this.head.x -= SIZE;\n        break;\n    }\n  }\n\n  /**\n   * Change the direction of the snake.\n   * Checks if the current direction is not in the opposite way of the head.\n   *\n   * @param {*} newDirection\n   */\n  changeMovement(newDirection) {\n    const current = this.direction;\n\n    switch (newDirection) {\n      case UP:\n        if (current != DOWN) this.direction = UP;\n        break;\n      case RIGHT:\n        if (current != LEFT) this.direction = RIGHT;\n        break;\n      case DOWN:\n        if (current != UP) this.direction = DOWN;\n        break;\n      case LEFT:\n        if (current != RIGHT) this.direction = LEFT;\n        break;\n    }\n  }\n\n  /**\n   * Checks if the snake head is colliding with the provided point.\n   * \n   * @param {*} point The points to check if the head is colliding with.\n   */\n  isColliding(point) {\n    const { x, y } = this.head;\n\n    return x === point.x && y === point.y;\n  }\n\n  isCollidingWithSelf() {\n    const { x, y } = this.head;\n\n    for (let i = 1; i < this.body.length; i++) {\n      if (this.body[i].x === x && this.body[i].y === y)\n        return true\n    }\n\n    return false\n  }\n\n  addBodyPart() {\n    this.body.push(new Point(this.head.x, this.head.y));\n  }\n}\n"]}