{"version":3,"sources":["../../src/net/client_handler.js"],"names":["ClientHandler","constructor","controller","socket","id","console","log","sendIdToClient","registerSocketEvents","networkController","pushInitialData","on","newDirection","updateMovement","gameController","createPlayer","disconnect","emit","removePlayer"],"mappings":";AACA,8E,8FADA;;AAGA;;;AAGe,MAAMA,aAAN,CAAoB;AACjC;;;;;AAKAC,cAAYC,UAAZ,EAAwBC,MAAxB,EAAgC;AAC9B,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,EAAL,GAAUD,OAAOC,EAAjB;AACAC,YAAQC,GAAR,CAAa,GAAE,KAAKF,EAAG,iBAAvB;;AAEA,SAAKG,cAAL;AACA,SAAKC,oBAAL;;AAEA;AACA,SAAKN,UAAL,CAAgBO,iBAAhB,CAAkCC,eAAlC,CAAkDP,MAAlD;AACD;;AAED;;;;;AAKAK,yBAAuB;AACrB,SAAKL,MAAL,CAAYQ,EAAZ,CAAe,iBAAf,EAAkCC,gBAAgB,KAAKC,cAAL,CAAoBD,YAApB,CAAlD;AACA,SAAKT,MAAL,CAAYQ,EAAZ,CAAe,YAAf,EAA6B,MAAM,KAAKT,UAAL,CAAgBY,cAAhB,CAA+BC,YAA/B,CAA4C,KAAKX,EAAjD,CAAnC;AACA,SAAKD,MAAL,CAAYQ,EAAZ,CAAe,YAAf,EAA6B,MAAM,KAAKK,UAAL,EAAnC;AACD;;AAED;;;;;AAKAT,mBAAiB;AACf,SAAKJ,MAAL,CAAYc,IAAZ,CAAiB,IAAjB,EAAuB,KAAKb,EAA5B;AACD;;AAED;;;;;;AAMAS,iBAAeD,YAAf,EAA6B;AAC3B,SAAKV,UAAL,CAAgBY,cAAhB,CAA+BD,cAA/B,CAA8C,KAAKT,EAAnD,EAAuDQ,YAAvD;AACD;;AAED;;;;;AAKAI,eAAa;AACXX,YAAQC,GAAR,CAAa,GAAE,KAAKF,EAAG,oBAAvB;AACA,SAAKF,UAAL,CAAgBY,cAAhB,CAA+BI,YAA/B,CAA4C,KAAKd,EAAjD;AACD,GAzDgC,C","file":"client_handler.js","sourcesContent":["// @ts-check\nimport Controller from \"../controller/controller\";\n\n/**\n * Handles communication to a client.\n */\nexport default class ClientHandler {\n  /**\n   * @param {Controller} controller \n   * @param {*} socket \n   * @api public\n   */\n  constructor(controller, socket) {\n    this.controller = controller;\n    this.socket = socket;\n    this.id = socket.id;\n    console.log(`${this.id} has connected!`);\n\n    this.sendIdToClient();\n    this.registerSocketEvents();\n\n    // Send initial data to this client only\n    this.controller.networkController.pushInitialData(socket);\n  }\n\n  /**\n   * Registers various events to listen to from the client.\n   * \n   * @api private\n   */\n  registerSocketEvents() {\n    this.socket.on(\"update_movement\", newDirection => this.updateMovement(newDirection));\n    this.socket.on(\"game_start\", () => this.controller.gameController.createPlayer(this.id));\n    this.socket.on(\"disconnect\", () => this.disconnect());\n  }\n\n  /**\n   * Sends the clients id to them.\n   * \n   * @api private\n   */\n  sendIdToClient() {\n    this.socket.emit(\"id\", this.id);\n  }\n\n  /**\n   * Updates the movement of the current player.\n   * \n   * @param {number} newDirection \n   * @api private\n   */\n  updateMovement(newDirection) {\n    this.controller.gameController.updateMovement(this.id, newDirection);\n  }\n\n  /**\n   * Removes the player from the game if they disconnect.\n   * \n   * @api private\n   */\n  disconnect() {\n    console.log(`${this.id} has disconnected!`);\n    this.controller.gameController.removePlayer(this.id);\n  }\n}\n"]}