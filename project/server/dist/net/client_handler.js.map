{"version":3,"sources":["../../src/net/client_handler.js"],"names":["ClientHandler","constructor","controller","socket","id","console","log","gameController","createPlayer","sendIdToClient","registerSocketEvents","networkController","pushInitialData","on","newDirection","updateMovement","disconnect","emit","removePlayer"],"mappings":";AACA,8E,8FADA;;AAGA;;;AAGe,MAAMA,aAAN,CAAoB;AACjC;;;;;AAKAC,cAAYC,UAAZ,EAAwBC,MAAxB,EAAgC;AAC9B,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,EAAL,GAAUD,OAAOC,EAAjB;AACAC,YAAQC,GAAR,CAAa,GAAE,KAAKF,EAAG,iBAAvB;;AAEA,SAAKF,UAAL,CAAgBK,cAAhB,CAA+BC,YAA/B,CAA4C,KAAKJ,EAAjD;AACA,SAAKK,cAAL;AACA,SAAKC,oBAAL;;AAEA;AACA,SAAKR,UAAL,CAAgBS,iBAAhB,CAAkCC,eAAlC,CAAkDT,MAAlD;AACD;;AAED;;;;;AAKAO,yBAAuB;AACrB,SAAKP,MAAL,CAAYU,EAAZ,CAAe,iBAAf,EAAkCC,gBAAgB,KAAKC,cAAL,CAAoBD,YAApB,CAAlD;;AAEA,SAAKX,MAAL,CAAYU,EAAZ,CAAe,YAAf,EAA6B,MAAM,KAAKG,UAAL,EAAnC;AACD;;AAED;;;;;AAKAP,mBAAiB;AACf,SAAKN,MAAL,CAAYc,IAAZ,CAAiB,IAAjB,EAAuB,KAAKb,EAA5B;AACD;;AAED;;;;;;AAMAW,iBAAeD,YAAf,EAA6B;AAC3B,SAAKZ,UAAL,CAAgBK,cAAhB,CAA+BQ,cAA/B,CAA8C,KAAKX,EAAnD,EAAuDU,YAAvD;AACD;;AAED;;;;;AAKAE,eAAa;AACXX,YAAQC,GAAR,CAAa,GAAE,KAAKF,EAAG,oBAAvB;AACA,SAAKF,UAAL,CAAgBK,cAAhB,CAA+BW,YAA/B,CAA4C,KAAKd,EAAjD;AACD,GA1DgC,C","file":"client_handler.js","sourcesContent":["// @ts-check\nimport Controller from \"../controller/controller\";\n\n/**\n * Handles communication to a client.\n */\nexport default class ClientHandler {\n  /**\n   * @param {Controller} controller \n   * @param {*} socket \n   * @api public\n   */\n  constructor(controller, socket) {\n    this.controller = controller;\n    this.socket = socket;\n    this.id = socket.id;\n    console.log(`${this.id} has connected!`);\n\n    this.controller.gameController.createPlayer(this.id);\n    this.sendIdToClient();\n    this.registerSocketEvents();\n\n    // Send initial data to this client only\n    this.controller.networkController.pushInitialData(socket);\n  }\n\n  /**\n   * Registers various events to listen to from the client.\n   * \n   * @api private\n   */\n  registerSocketEvents() {\n    this.socket.on(\"update_movement\", newDirection => this.updateMovement(newDirection));\n\n    this.socket.on(\"disconnect\", () => this.disconnect());\n  }\n\n  /**\n   * Sends the clients id to them.\n   * \n   * @api private\n   */\n  sendIdToClient() {\n    this.socket.emit(\"id\", this.id);\n  }\n\n  /**\n   * Updates the movement of the current player.\n   * \n   * @param {number} newDirection \n   * @api private\n   */\n  updateMovement(newDirection) {\n    this.controller.gameController.updateMovement(this.id, newDirection);\n  }\n\n  /**\n   * Removes the player from the game if they disconnect.\n   * \n   * @api private\n   */\n  disconnect() {\n    console.log(`${this.id} has disconnected!`);\n    this.controller.gameController.removePlayer(this.id);\n  }\n}\n"]}